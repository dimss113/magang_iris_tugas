// Generated by gencpp from file IRIS/data.msg
// DO NOT EDIT!


#ifndef IRIS_MESSAGE_DATA_H
#define IRIS_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace IRIS
{
template <class ContainerAllocator>
struct data_
{
  typedef data_<ContainerAllocator> Type;

  data_()
    : panjang(0)
    , lebar(0)
    , tinggi(0)
    , luas(0)  {
    }
  data_(const ContainerAllocator& _alloc)
    : panjang(0)
    , lebar(0)
    , tinggi(0)
    , luas(0)  {
  (void)_alloc;
    }



   typedef int32_t _panjang_type;
  _panjang_type panjang;

   typedef int32_t _lebar_type;
  _lebar_type lebar;

   typedef int32_t _tinggi_type;
  _tinggi_type tinggi;

   typedef int32_t _luas_type;
  _luas_type luas;





  typedef boost::shared_ptr< ::IRIS::data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::IRIS::data_<ContainerAllocator> const> ConstPtr;

}; // struct data_

typedef ::IRIS::data_<std::allocator<void> > data;

typedef boost::shared_ptr< ::IRIS::data > dataPtr;
typedef boost::shared_ptr< ::IRIS::data const> dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::IRIS::data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::IRIS::data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::IRIS::data_<ContainerAllocator1> & lhs, const ::IRIS::data_<ContainerAllocator2> & rhs)
{
  return lhs.panjang == rhs.panjang &&
    lhs.lebar == rhs.lebar &&
    lhs.tinggi == rhs.tinggi &&
    lhs.luas == rhs.luas;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::IRIS::data_<ContainerAllocator1> & lhs, const ::IRIS::data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace IRIS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::IRIS::data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::IRIS::data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::IRIS::data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::IRIS::data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::IRIS::data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::IRIS::data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::IRIS::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0cd4e5dd6f34bbec68ae4feebbf03ae5";
  }

  static const char* value(const ::IRIS::data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0cd4e5dd6f34bbecULL;
  static const uint64_t static_value2 = 0x68ae4feebbf03ae5ULL;
};

template<class ContainerAllocator>
struct DataType< ::IRIS::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IRIS/data";
  }

  static const char* value(const ::IRIS::data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::IRIS::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 panjang\n"
"int32 lebar\n"
"int32 tinggi\n"
"int32 luas\n"
;
  }

  static const char* value(const ::IRIS::data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::IRIS::data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.panjang);
      stream.next(m.lebar);
      stream.next(m.tinggi);
      stream.next(m.luas);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::IRIS::data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::IRIS::data_<ContainerAllocator>& v)
  {
    s << indent << "panjang: ";
    Printer<int32_t>::stream(s, indent + "  ", v.panjang);
    s << indent << "lebar: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lebar);
    s << indent << "tinggi: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tinggi);
    s << indent << "luas: ";
    Printer<int32_t>::stream(s, indent + "  ", v.luas);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRIS_MESSAGE_DATA_H
